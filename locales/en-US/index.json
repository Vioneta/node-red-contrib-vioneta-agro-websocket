{
    "ha-binary-sensor": {
        "error": {
            "no_connection": "Sensor update attempted without connection to server",
            "integration_not_loaded": "Integration not loaded\/enabled",
            "invalid_state": "State must be defined",
            "api_error": "API error"
        },
        "label": {
            "state": "State",
            "input_override": "Input Override",
            "resend": "Resend state and attributes",
            "debug": "Show Debug Information"
        }
    },
    "api-call-service": {
        "label": {
            "alternate_tags": "Use alternate template tags for the data field",
            "area": "Area",
            "data": "Data",
            "device": "Device",
            "domain": "Domain",
            "entity": "Entity",
            "load_example_data": "Load example data",
            "merge_context": "Merge context",
            "queue": "Queue",
            "queue_all": "all messages",
            "queue_first": "first message only",
            "queue_last": "last message only",
            "queue_none": "don't queue messages",
            "service": "Service",
            "show_debug": "Show debug information"
        },
        "error": {
            "invalid_entity_id": "Invalid entity id format"
        }
    },
    "home-assistant": {
        "error": {
            "cannot_connect": "Cannot connect to Home Assistant server",
            "connection_lost": "connection lost",
            "hass_host_required": "Base URL not set in server config",
            "integration_not_loaded": "Integration not loaded",
            "invalid_auth": "Invalid access token for websocket",
            "invalid_state": "Invalid state",
            "no_connection": "No connection to Home Assistant",
            "pattern_not_matched": "Pattern not matched",
            "user_not_admin": "User required to have admin privileges in Home Assistant"
        },
        "label": {
            "cancel": "Cancel",
            "device": "Device",
            "done": "Done",
            "entity": "Entity",
            "entity_config": "Entity config",
            "entity_id": "Entity ID",
            "filter_results_label": "Filter",
            "filter_results_title": "Filter results",
            "for": "For",
            "if_state": "If state",
            "label": "Label",
            "name": "Name",
            "no_matches_found": "No matches found",
            "output_debug": "Output debug information",
            "output_on_connect": "Output on connect",
            "output_properties": "Output properties",
            "select_option": {
                "boolean": "boolean",
                "days": "days",
                "exact": "exact",
                "greater_than": ">",
                "greater_than_equal": ">=",
                "hours": "hours",
                "in": "in",
                "is": "is",
                "is_not": "is not",
                "jsonata": "JSONata",
                "less_than": "<",
                "less_than_equal": "<=",
                "list": "list",
                "milliseconds": "milliseconds",
                "minutes": "minutes",
                "not_in": "not in",
                "number": "number",
                "regex": "regex",
                "seconds": "seconds",
                "string": "string",
                "substring": "substring"
            },
            "server": "Server",
            "state_type": "State type",
            "test": "Test"
        },
        "status": {
            "connected": "connected",
            "connecting": "connecting",
            "disabled": "DISABLED",
            "disconnected": "disconnected",
            "error": "error",
            "error_registering": "error registering",
            "failed": "failed",
            "jsonata_error": "jsonata error",
            "no_connection": "no connection",
            "off": "off",
            "on": "on",
            "pressed": "pressed",
            "received": "received",
            "registered": "registered",
            "running": "running",
            "sending": "sending",
            "state_change": "state change",
            "success": "success",
            "triggered": "triggered",
            "updated": "updated",
            "validation_error": "validation error"
        },
        "ui": {
            "migrations": {
                "all_nodes_updated": "Home Assistant nodes have been updated. Deploy to save changes.",
                "button_cancel": "Cancel",
                "button_label": "Update Home Assistant Nodes",
                "button_ok": "Update Nodes",
                "message": "This will update all Home Assistant nodes to the current schema. This is not required for the nodes to function.\nNodes with yellow labels need to be updated before they can be edited. This can be done by either opening each node individually in the Node-RED editor or running this command.",
                "node_schema_updated": "Node schema has been updated",
                "title": "Update Home Assistant Nodes",
                "warning": "It is recommended to back up your flows before doing an update of all Home Assistant nodes."
            },
            "notifications": {
                "attention": "Attention"
            }
        }
    },
    "config-server": {
        "errors": {
            "empty_base_url": "Home Assistant base URL needs to be set",
            "invalid_base_url": "Invalid base URL for Home Assistant: [__url__]",
            "invalid_protocol": "Home Assistnat base URL needs to begin with http:\/\/ or https:\/\/",
            "no_server_selected": "No server selected and deployed.",
            "server_deploy": "Deploy a valid server config for autocomplete to show results."
        },
        "label": {
            "accept_all_certs": "Accept Unauthorized SSL Certificates",
            "access_token": "Access token",
            "area_selector": "Area Selector",
            "base_url": "Base URL",
            "cache_autocomplete_results": "Cache autocomplete results",
            "delay_connection_attempts": "Delay connection attempts",
            "device_selector": "Device Selector",
            "enable_global_context_store": "Enable global context store",
            "enable_heartbeat": "Enable heartbeat",
            "entity_selector": "Entity Selector",
            "friendly_name": "friendly name",
            "heartbeat_interval": "Heartbeat interval",
            "id": "ID",
            "id_selector": "ID Selector",
            "seconds": "Seconds",
            "state_boolean_list": "State boolean",
            "status": {
                "12_hour_format": "12-hour format",
                "24_hour_format": "24-hour format",
                "day": "Day",
                "default": "default",
                "hidden": "hidden",
                "hour_cycle": "Hour cycle",
                "long": "long",
                "month": "Month",
                "numeric": "numeric",
                "separator": "Separator",
                "short": "short",
                "time_format": "Time format",
                "title": "Status date format",
                "two_digit": "2-digit",
                "year": "Year"
            },
            "ui_settings": "UI Settings",
            "using_add_on": "Using the Home Assistant Add-on"
        },
        "status": {
            "connected": "connected",
            "connecting": "connecting",
            "disabled": "DISABLED",
            "disconnected": "disconnected",
            "error": "error",
            "registered": "registered",
            "running": "running",
            "triggered": "triggered"
        }
    },
    "ha-device-config": {
        "label": {
            "name": "Name",
            "manufacturer": "Manufacturer",
            "model": "Model",
            "hw_version": "Hardware Version",
            "sw_version": "Software Version"
        }
    },
    "ha-device": {
        "label": {
            "name": "Name",
            "server": "Server",
            "type": "Type",
            "trigger": "Trigger",
            "action": "Action",
            "device": "Device",
            "seconds": "seconds",
            "minutes": "minutes",
            "hours": "hours"
        },
        "error": {
            "invalid_device_config": "Invalid config for device trigger",
            "unknown_field_type": "Unknown field type: __type__",
            "report": "Report"
        },
        "ui": {
            "no_area": "No Area"
        }
    },
    "ha-entity-config": {
        "label": {
            "device_class": "Device class",
            "device_class_options": {
                "apparent_power": "apparent power",
                "aqi": "aqi",
                "atmospheric_pressure": "atmospheric pressure",
                "battery": "battery",
                "battery_charging": "battery charging",
                "carbon_dioxide": "carbon dioxide",
                "carbon_monoxide": "carbon monoxide",
                "co": "co",
                "cold": "cold",
                "connectivity": "connectivity",
                "current": "current",
                "data_rate": "data rate",
                "data_size": "data size",
                "date": "date",
                "distance": "distance",
                "door": "door",
                "duration": "duration",
                "energy": "energy",
                "energy_storage": "energy storage",
                "frequency": "frequency",
                "garage_door": "garage door",
                "gas": "gas",
                "heat": "heat",
                "humidity": "humidity",
                "illuminance": "illuminance",
                "irradiance": "irradiance",
                "light": "light",
                "lock": "lock",
                "moisture": "moisture",
                "monetary": "monetary",
                "motion": "motion",
                "moving": "moving",
                "nitrogen_dioxide": "nitrogen dioxide",
                "nitrogen_monoxide": "nitrogen monoxide",
                "nitrous_oxide": "nitrous oxide",
                "occupancy": "occupancy",
                "opening": "opening",
                "outlet": "outlet",
                "ozone": "ozone",
                "plug": "plug",
                "pm1": "pm1",
                "pm10": "pm10",
                "pm25": "pm25",
                "power": "power",
                "power_factor": "power factor",
                "precipitation": "precipitation",
                "precipitation_intensity": "precipitation intensity",
                "presence": "presence",
                "pressure": "pressure",
                "problem": "problem",
                "reactive_power": "reactive power",
                "restart": "restart",
                "running": "running",
                "safety": "safety",
                "signal_strength": "signal strength",
                "smoke": "smoke",
                "sound": "sound",
                "sound_pressure": "sound pressure",
                "speed": "speed",
                "sulphur_dioxide": "sulphur dioxide",
                "switch": "switch",
                "tamper": "tamper",
                "temperature": "temperature",
                "timestamp": "timestamp",
                "update": "update",
                "vibration": "vibration",
                "volatile_organic_compounds": "volatile organic compounds",
                "voltage": "voltage",
                "volume": "volume",
                "volume_storage": "volume storage",
                "water": "water",
                "weight": "weight",
                "wind_speed": "wind speed",
                "window": "window"
            },
            "entity_category": "Category",
            "entity_category_options": {
                "config": "config",
                "diagnostic": "diagnostic"
            },
            "entity_picture": "Entity picture",
            "icon": "Icon",
            "last_reset": "Last reset",
            "max_length": "Max length",
            "max_value": "Max value",
            "min_length": "Min length",
            "min_value": "Min value",
            "mode": "Mode",
            "mode_options": {
                "auto": "auto",
                "box": "box",
                "password": "password",
                "slider": "slider",
                "text": "text"
            },
            "name": "Friendly name",
            "options": "Options",
            "output_debug": "Output debug information",
            "pattern": "Pattern",
            "resend": "Resend state and attributes",
            "state_class": "State class",
            "state_class_options": {
                "measurement": "measurement",
                "total": "total",
                "total_increasing": "total increasing"
            },
            "step_value": "Step",
            "type": "Type",
            "type_options": {
                "binary_sensor": "binary sensor",
                "button": "button",
                "number": "number",
                "select": "select",
                "sensor": "sensor",
                "switch": "switch",
                "text": "text"
            },
            "unit_of_measurement": "Unit of measurement"
        }
    },
    "ha-entity": {
        "label": {
            "debug": "Show Debug Information",
            "input_override": "Input Override",
            "name": "Name",
            "on_state_change": "Output on state change",
            "output_location": "Output Location",
            "payload": "Payload",
            "server": "Server",
            "state": "State",
            "type": "Type"
        }
    },
    "get-history": {
        "error": {
            "invalid_relative_time": "Invalid relative time"
        }
    },
    "ha-number": {
        "error": {
            "value_not_number": "The state is not a number"
        },
        "label": {
            "name": "Name",
            "entity_config": "Entity config",
            "value": "Value",
            "mode": "Mode",
            "select": {
                "in": "Listen for changes",
                "out": "Set value"
            }
        }
    },
    "poll-state": {
        "errors": {
            "jsonata_error": "JSONata Error: __message__",
            "interval_nan": "Offset is not a number: __offset__"
        }
    },
    "ha-select": {
        "label": {
            "entity_config": "Entity config",
            "mode": "Mode",
            "name": "Name",
            "select": {
                "in": "Listen for changes",
                "out": "Set value"
            },
            "value": "Value"
        },
        "error": {
            "invalid_value": "Option value does not exist in the list of options"
        }
    },
    "ha-sentence": {
        "label": {
            "name": "Name",
            "sentences": "Sentences",
            "server": "Server"
        }
    },
    "server-events": {
        "alert": "Alert",
        "alert_message": "Leaving Event Type empty and listening for all events may overload the websocket message queue.",
        "error": {
            "invalid_json": "Event data is not valid JSON"
        },
        "label": {
            "event_data": "Event data",
            "event_type": "Event type",
            "name": "Name",
            "output_only_after_running": "Output only after Home Assistant is running",
            "server": "Server"
        }
    },
    "server-state-changed": {
        "label": {
            "ignore_current_state_unavailable": "Current state is unavailable",
            "ignore_current_state_unknown": "Current state is unknown",
            "ignore_header": "Ignore state change event when:",
            "ignore_prev_state_null": "Previous state doesn't exist",
            "ignore_prev_state_unavailable": "Previous state is unavailable",
            "ignore_prev_state_unknown": "Previous state is unknown",
            "output_on_connect": "Output on Connect",
            "output_only_on_state_change": "Current state equals previous state"
        }
    },
    "ha-switch": {
        "label": {
            "enable_input": "Enable input",
            "output_on_state_change": "Output on state change"
        }
    },
    "ha-tag": {
        "errors": {
            "no_tags_found": "No tags found in Home Assistant"
        },
        "label": {
            "all_tags": "ALL TAGS",
            "device_id": "Device ID",
            "devices": "Devices",
            "tag": "Tag",
            "tags": "Tags",
            "update_tag_list": "update tag list"
        }
    },
    "ha-text": {
        "label": {
            "entity_config": "Entity config",
            "mode": "Mode",
            "name": "Name",
            "select": {
                "in": "Listen for changes",
                "out": "Set value"
            },
            "text": "Text"
        }
    },
    "ha-time": {
        "errors": {
            "invalid_jsonata_payload": "Invalid jsonata sending entity state as payload",
            "jsonata_error": "JSONata Error: __message__",
            "offset_nan": "Offset is not a number: __offset__"
        },
        "status": {
            "in_the_past": "In the past",
            "invalid_date": "Invalid date",
            "invalid_property": "Invalid property",
            "next_at": "Next at __nextTime__",
            "no_days_selected": "Select at least one day of the week",
            "sent": "Sent",
            "sent_and_next": "Sent at __sentTime__ Next at __nextTime__",
            "unavailable": "Unavailable",
            "error": "Error"
        },
        "label": {
            "name": "Name",
            "server": "Server",
            "entity_id": "Entity Id",
            "property": "Property",
            "offset": "Offset",
            "seconds": "seconds",
            "minutes": "minutes",
            "hours": "hours",
            "randomize_offset": "Randomize time within the offset",
            "payload": "Payload",
            "repeat_daily": "Repeat Daily",
            "monday": "Monday",
            "tuesday": "Tuesday",
            "wednesday": "Wednesday",
            "thursday": "Thursday",
            "friday": "Friday",
            "saturday": "Saturday",
            "sunday": "Sunday"
        }
    },
    "trigger-state": {
        "label": {
            "conditions": "Conditions",
            "enable_input": "Enable input",
            "output_on_connect": "Output on connect",
            "select_option": {
                "always": "send always",
                "current_state": "current state",
                "custom_message": "custom message",
                "custom_payload": "custom payload",
                "default_message": "default message",
                "entity_id": "entity id",
                "if_prev_state": "If previous state",
                "if_property": "If property",
                "if_state": "If state",
                "previous_state": "previous state",
                "property": "property",
                "this_entity": "this entity"
            }
        }
    },
    "ha-wait-until": {
        "label": {
            "block_input_overrides": "Block input overrides",
            "check_current_state": "Check against current state",
            "entity_location": "Entity location",
            "timeout": "Timeout",
            "wait_until": "Wait until"
        },
        "status": {
            "timed_out": "timed out",
            "true": "true",
            "waiting": "waiting"
        }
    },
    "ha-webhook": {
        "label": {
            "allowed_methods": "Allowed Methods",
            "put": "PUT",
            "post": "POST",
            "get": "GET",
            "head": "HEAD"
        }
    }
}