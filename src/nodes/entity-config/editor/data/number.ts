import { HaConfigOption } from '.';
import { DeviceClass, monetaryList } from './common';

const numberDeviceClasses = [
    DeviceClass.ApparentPower,
    DeviceClass.Aqi,
    DeviceClass.AtmosphericPressure,
    DeviceClass.Battery,
    DeviceClass.CarbonDioxide,
    DeviceClass.CarbonMonoxide,
    DeviceClass.Current,
    DeviceClass.DataRate,
    DeviceClass.DataSize,
    DeviceClass.Distance,
    DeviceClass.Energy,
    DeviceClass.EnergyStorage,
    DeviceClass.Frequency,
    DeviceClass.Gas,
    DeviceClass.Humidity,
    DeviceClass.Illuminance,
    DeviceClass.Irradiance,
    DeviceClass.Moisture,
    DeviceClass.Monetary,
    DeviceClass.NitrogenDioxide,
    DeviceClass.NitrogenMonoxide,
    DeviceClass.NitrousOxide,
    DeviceClass.Ozone,
    DeviceClass.Pm1,
    DeviceClass.Pm10,
    DeviceClass.Pm25,
    DeviceClass.Power,
    DeviceClass.PowerFactor,
    DeviceClass.Precipitation,
    DeviceClass.PrecipitationIntensity,
    DeviceClass.Pressure,
    DeviceClass.ReactivePower,
    DeviceClass.SignalStrength,
    DeviceClass.SoundPressure,
    DeviceClass.Speed,
    DeviceClass.SulphurDioxide,
    DeviceClass.Temperature,
    DeviceClass.VolatileOrganicCompounds,
    DeviceClass.Voltage,
    DeviceClass.Volume,
    DeviceClass.VolumeStorage,
    DeviceClass.Water,
    DeviceClass.Weight,
    DeviceClass.WindSpeed,
] as const;

export const numberUnitOfMeasurement: Record<
    (typeof numberDeviceClasses)[number],
    null | string[]
> = {
    apparent_power: ['VA'],
    aqi: null,
    atmospheric_pressure: [
        'cbar',
        'bar',
        'hPa',
        'inHg',
        'kPa',
        'mbar',
        'Pa',
        'psi',
    ],
    battery: ['%'],
    carbon_dioxide: ['ppm'],
    carbon_monoxide: ['ppm'],
    current: ['A'],
    data_rate: [
        'bit/s',
        'kbit/s',
        'Mbit/s',
        'Gbit/s',
        'B/s',
        'kB/s',
        'MB/s',
        'GB/s',
        'KiB/s',
        'MiB/s',
        'GiB/s',
    ],
    data_size: [
        'bit',
        'kbit',
        'Mbit',
        'Gbit',
        'B',
        'kB',
        'MB',
        'GB',
        'TB',
        'PB',
        'EB',
        'ZB',
        'YB',
        'KiB',
        'MiB',
        'GiB',
        'TiB',
        'PiB',
        'EiB',
        'ZiB',
        'YiB',
    ],

    distance: ['km', 'm', 'cm', 'mm', 'mi', 'yd', 'in'],
    energy: ['Wh', 'kWh', 'MWh', 'GJ'],
    energy_storage: ['Wh', 'kWh', 'MWh', 'MJ', 'GJ'],
    frequency: ['Hz', 'kHz', 'MHz', 'GHz'],
    gas: ['m³', 'ft³'],
    humidity: ['%'],
    illuminance: ['lx', 'lm'],
    irradiance: ['W/m²', 'BTU/(h*ft²)'],
    moisture: ['%'],
    monetary: monetaryList,
    nitrogen_dioxide: ['µg/m³'],
    nitrogen_monoxide: ['µg/m³'],
    nitrous_oxide: ['µg/m³'],
    ozone: ['µg/m³'],
    pm1: ['µg/m³'],
    pm25: ['µg/m³'],
    pm10: ['µg/m³'],
    power: ['W', 'kW'],
    power_factor: ['%'],
    precipitation: ['mm', 'in', 'cm'],
    precipitation_intensity: ['mm/h', 'mm/d', 'in/h', 'in/d'],
    pressure: ['cbar', 'bar', 'hPa', 'inHg', 'kPa', 'mbar', 'Pa', 'psi'],
    reactive_power: ['var'],
    signal_strength: ['dB', 'dBm'],
    sound_pressure: ['dB', 'dBA'],
    speed: ['ft/s', 'in/d', 'in/h', 'km/h', 'kn', 'm/s', 'mm/d', 'mph'],
    sulphur_dioxide: ['µg/m³'],
    temperature: ['°C', '°F'],
    volatile_organic_compounds: ['µg/m³'],
    voltage: ['V'],
    volume: ['fl. oz.', 'ft³', 'gal', 'L', 'mL', 'm³'],
    volume_storage: ['L', 'mL', 'gal', 'fl. oz.', 'm³', 'ft³', 'CCF'],
    water: ['L', 'gal', 'm³', 'ft³'],
    weight: ['g', 'kg', 'lb', 'mg', 'oz', 'µg'],
    wind_speed: ['ft/s', 'km/h', 'kn', 'm/s', 'mph'],
};

export default [
    {
        id: 'entity_category',
        type: 'select',
        values: ['', 'config', 'diagnostic'],
    },
    {
        id: 'device_class',
        type: 'select',
        values: ['', ...numberDeviceClasses],
    },
    {
        id: 'unit_of_measurement',
        type: 'unit_of_measurement',
        values: numberUnitOfMeasurement,
    },
    {
        id: 'min_value',
        type: 'number',
    },
    {
        id: 'max_value',
        type: 'number',
    },
    {
        id: 'step_value',
        type: 'number',
    },
    {
        id: 'mode',
        type: 'select',
        values: ['auto', 'box', 'slider'],
    },
] as HaConfigOption[];
